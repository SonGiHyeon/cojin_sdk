/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FaucetTracker {
  export type FaucetInfoStruct = {
    isReceive: boolean;
    isAdminReceive: boolean;
    lastReceivedAt: BigNumberish;
  };

  export type FaucetInfoStructOutput = [
    isReceive: boolean,
    isAdminReceive: boolean,
    lastReceivedAt: bigint
  ] & { isReceive: boolean; isAdminReceive: boolean; lastReceivedAt: bigint };
}

export interface FaucetTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFaucetInfo"
      | "getStatus"
      | "markReceived"
      | "owner"
      | "records"
      | "reset"
      | "resetAll"
      | "setAdminReceived"
      | "setUserReceived"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFaucetInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markReceived",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "reset", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "resetAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminReceived",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserReceived",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFaucetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdminReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserReceived",
    data: BytesLike
  ): Result;
}

export interface FaucetTracker extends BaseContract {
  connect(runner?: ContractRunner | null): FaucetTracker;
  waitForDeployment(): Promise<this>;

  interface: FaucetTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFaucetInfo: TypedContractMethod<
    [user: AddressLike],
    [FaucetTracker.FaucetInfoStructOutput],
    "view"
  >;

  getStatus: TypedContractMethod<
    [user: AddressLike],
    [[boolean, boolean]],
    "view"
  >;

  markReceived: TypedContractMethod<
    [user: AddressLike, isAdmin: boolean],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  records: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isReceive: boolean;
        isAdminReceive: boolean;
        lastReceivedAt: bigint;
      }
    ],
    "view"
  >;

  reset: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  resetAll: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  setAdminReceived: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserReceived: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFaucetInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [FaucetTracker.FaucetInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[user: AddressLike], [[boolean, boolean]], "view">;
  getFunction(
    nameOrSignature: "markReceived"
  ): TypedContractMethod<
    [user: AddressLike, isAdmin: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isReceive: boolean;
        isAdminReceive: boolean;
        lastReceivedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetAll"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdminReceived"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserReceived"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  filters: {};
}
